* work-in-progress (WIP, limit 5)
Create action that let's worker ask coder for adjustment.
Handle code file edit cases of inadequate levenshtein distance.
* todo
** general
Create log command to view past interactions.
Audio input support for small queries ("hey ghostcode, what was the parser class called in this project?")
Investigate proper deployment (conda, docker, getting llama.cpp, downloading models from huggingface).
More user friendly setup during init for various backends (ask for API keys etc).
Status command (not sure what it should even do yet).
git integration.
emacs integration (use server and emacslisp generation with "emacs -e").
More useful CLI commands.
Keep main command executiong from crashing catastrophically (wrap in try and exit gracefully).
** CLI
add proper SlashCommand type for slash (like "/quit") commands in interact mode.
Change InteractionHistory to include a title and request an LLM to come up with a descriptive title at the end of an interaction.
** coder
Investigate wether structured output degrades performance.
** worker
** tests
Create basic testing framework (/tests folder and scripts).
* about this file
Todo list that's structured like a Canban board.
One line is one todo-item.
Single asterisk (org-mode) headings indicate canban columns (except this 'about this file' heading). These are WIP, Todo, and Done.
 - WIP: Contains items currently being worked on. Work may include research for vague items, that generate more items for the todo list.
 - todo: Contains items that may be worked on in the future. These can be very specific, or vague and general. To be worked on, an item moves from this list into the WIP list. This list also contains 2 asterisk sub-headings to structure it. A single todo item is still a plaintext line, though.
 - done: Contains todo items that have been finished. Also known as "brag list". Somewhat pointless but can be useful to get an overview of the projects history.
* done
Create function to reliably replace or create code based on CoderResponsePart (possibly using worker).
Integrate worker into interact mode.
