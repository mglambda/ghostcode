* work-in-progress (WIP, limit 5)
make proper multiline mode utility function
Properly test worker recovery.
* todo
** general
make unique_ids into a newtype (e.g. InteractionID)
Improve file edit displays
Simulate file edits and show diffs
Figure out a way to run tests/run the program so AI can get feedback and see errors
Add doc comment injections to yaml config files.
refactor init and saving of project
Audio input support for small queries ("hey ghostcode, what was the parser class called in this project?")
Investigate proper deployment (conda, docker, getting llama.cpp, downloading models from huggingface).
More user friendly setup during init for various backends (ask for API keys etc).
Status command (not sure what it should even do yet).
git integration.
More useful CLI commands.
Keep main command executiong from crashing catastrophically (wrap in try and exit gracefully).
* emacs integration
Investigate autocomplete
get list of buffers that are also in context
get list of buffers that are under current project root
Add opened emacs buffers that are under project root automatically to context (with config option to disable)
Show diffs in emacs
function to show arbitrary text to user in a buffer
special buffer to share extra context
investigate other uses
** CLI
Redo the entire action_queue printing stuff properly
Add /help command.
** coder
Investigate wether structured output degrades performance.
** worker
Add context expansion/contraction by worker
** tests
Write tests for the virtual terminal
* about this file
Todo list that's structured like a Canban board.
One line is one todo-item.
Single asterisk (org-mode) headings indicate canban columns (except this 'about this file' heading). These are WIP, Todo, and Done.
 - WIP: Contains items currently being worked on. Work may include research for vague items, that generate more items for the todo list.
 - todo: Contains items that may be worked on in the future. These can be very specific, or vague and general. To be worked on, an item moves from this list into the WIP list. This list also contains 2 asterisk sub-headings to structure it. A single todo item is still a plaintext line, though.
 - done: Contains todo items that have been finished. Also known as "brag list". Somewhat pointless but can be useful to get an overview of the projects history.
* done
Create function to reliably replace or create code based on CoderResponsePart (possibly using worker).
Integrate worker into interact mode.
Add clearance types.
Add basic confirmation dialog.
Create virtual shell
Create action that let's worker ask coder for adjustment.
Give actions short string representation to be used at various points in the CLI interface.
Fix broken recovery.
Handle code file edit cases of inadequate levenshtein distance.
Make a show_log method for program.
Fix log file not being created when logging is set to stderr.
Create basic testing framework (/tests folder and scripts).
Create log command to view past interactions.
add talk command
Have worker make title for interactions
Refactor ghostcoder querying from interact subcommand to action queue.
add proper SlashCommand type for slash (like "/quit") commands in interact mode.
emacs integration (use server and emacslisp generation with "emacs -e").
Add ActionShellCommand to execute_action match case.
Create prompt for worker waiting on shell command
Create worker routing
Refactor prompt creation into prompts.py
